"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/iron-session";
exports.ids = ["vendor-chunks/iron-session"];
exports.modules = {

/***/ "(rsc)/./node_modules/iron-session/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/iron-session/dist/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getIronSession: () => (/* binding */ getIronSession),\n/* harmony export */   sealData: () => (/* binding */ sealData),\n/* harmony export */   unsealData: () => (/* binding */ unsealData)\n/* harmony export */ });\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cookie */ \"(rsc)/./node_modules/cookie/index.js\");\n/* harmony import */ var iron_webcrypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! iron-webcrypto */ \"(rsc)/./node_modules/iron-webcrypto/dist/index.js\");\n/* harmony import */ var uncrypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uncrypto */ \"(rsc)/./node_modules/uncrypto/dist/crypto.node.mjs\");\n\n\n\n\n// src/core.ts\nvar timestampSkewSec = 60;\nvar fourteenDaysInSeconds = 14 * 24 * 3600;\nvar currentMajorVersion = 2;\nvar versionDelimiter = \"~\";\nvar defaultOptions = {\n  ttl: fourteenDaysInSeconds,\n  cookieOptions: { httpOnly: true, secure: true, sameSite: \"lax\", path: \"/\" }\n};\nfunction normalizeStringPasswordToMap(password) {\n  return typeof password === \"string\" ? { 1: password } : password;\n}\nfunction parseSeal(seal) {\n  const [sealWithoutVersion, tokenVersionAsString] = seal.split(versionDelimiter);\n  const tokenVersion = tokenVersionAsString == null ? null : parseInt(tokenVersionAsString, 10);\n  return { sealWithoutVersion, tokenVersion };\n}\nfunction computeCookieMaxAge(ttl) {\n  if (ttl === 0) {\n    return 2147483647;\n  }\n  return ttl - timestampSkewSec;\n}\nfunction getCookie(req, cookieName) {\n  return (0,cookie__WEBPACK_IMPORTED_MODULE_0__.parse)(\n    (\"headers\" in req && typeof req.headers.get === \"function\" ? req.headers.get(\"cookie\") : req.headers.cookie) ?? \"\"\n  )[cookieName] ?? \"\";\n}\nfunction getServerActionCookie(cookieName, cookieHandler) {\n  const cookieObject = cookieHandler.get(cookieName);\n  const cookie = cookieObject?.value;\n  if (typeof cookie === \"string\") {\n    return cookie;\n  }\n  return \"\";\n}\nfunction setCookie(res, cookieValue) {\n  if (\"headers\" in res && typeof res.headers.append === \"function\") {\n    res.headers.append(\"set-cookie\", cookieValue);\n    return;\n  }\n  let existingSetCookie = res.getHeader(\"set-cookie\") ?? [];\n  if (!Array.isArray(existingSetCookie)) {\n    existingSetCookie = [existingSetCookie.toString()];\n  }\n  res.setHeader(\"set-cookie\", [\n    ...existingSetCookie,\n    cookieValue\n  ]);\n}\nfunction createSealData(_crypto) {\n  return async function sealData2(data, {\n    password,\n    ttl = fourteenDaysInSeconds\n  }) {\n    const passwordsMap = normalizeStringPasswordToMap(password);\n    const mostRecentPasswordId = Math.max(\n      ...Object.keys(passwordsMap).map(Number)\n    );\n    const passwordForSeal = {\n      id: mostRecentPasswordId.toString(),\n      secret: passwordsMap[mostRecentPasswordId]\n    };\n    const seal$1 = await (0,iron_webcrypto__WEBPACK_IMPORTED_MODULE_1__.seal)(_crypto, data, passwordForSeal, {\n      ...iron_webcrypto__WEBPACK_IMPORTED_MODULE_1__.defaults,\n      ttl: ttl * 1e3\n    });\n    return `${seal$1}${versionDelimiter}${currentMajorVersion}`;\n  };\n}\nfunction createUnsealData(_crypto) {\n  return async function unsealData2(seal, {\n    password,\n    ttl = fourteenDaysInSeconds\n  }) {\n    const passwordsMap = normalizeStringPasswordToMap(password);\n    const { sealWithoutVersion, tokenVersion } = parseSeal(seal);\n    try {\n      const data = await (0,iron_webcrypto__WEBPACK_IMPORTED_MODULE_1__.unseal)(_crypto, sealWithoutVersion, passwordsMap, {\n        ...iron_webcrypto__WEBPACK_IMPORTED_MODULE_1__.defaults,\n        ttl: ttl * 1e3\n      }) ?? {};\n      if (tokenVersion === 2) {\n        return data;\n      }\n      return { ...data.persistent };\n    } catch (error) {\n      if (error instanceof Error && /^(Expired seal|Bad hmac value|Cannot find password|Incorrect number of sealed components)/.test(\n        error.message\n      )) {\n        return {};\n      }\n      throw error;\n    }\n  };\n}\nfunction getSessionConfig(sessionOptions) {\n  const options = {\n    ...defaultOptions,\n    ...sessionOptions,\n    cookieOptions: {\n      ...defaultOptions.cookieOptions,\n      ...sessionOptions.cookieOptions || {}\n    }\n  };\n  if (sessionOptions.cookieOptions && \"maxAge\" in sessionOptions.cookieOptions) {\n    if (sessionOptions.cookieOptions.maxAge === void 0) {\n      options.ttl = 0;\n    }\n  } else {\n    options.cookieOptions.maxAge = computeCookieMaxAge(options.ttl);\n  }\n  return options;\n}\nvar badUsageMessage = \"iron-session: Bad usage: use getIronSession(req, res, options) or getIronSession(cookieStore, options).\";\nfunction createGetIronSession(sealData2, unsealData2) {\n  return getIronSession2;\n  async function getIronSession2(reqOrCookieStore, resOrsessionOptions, sessionOptions) {\n    if (!reqOrCookieStore) {\n      throw new Error(badUsageMessage);\n    }\n    if (!resOrsessionOptions) {\n      throw new Error(badUsageMessage);\n    }\n    if (!sessionOptions) {\n      return getIronSessionFromCookieStore(\n        reqOrCookieStore,\n        resOrsessionOptions,\n        sealData2,\n        unsealData2\n      );\n    }\n    const req = reqOrCookieStore;\n    const res = resOrsessionOptions;\n    if (!sessionOptions) {\n      throw new Error(badUsageMessage);\n    }\n    if (!sessionOptions.cookieName) {\n      throw new Error(\"iron-session: Bad usage. Missing cookie name.\");\n    }\n    if (!sessionOptions.password) {\n      throw new Error(\"iron-session: Bad usage. Missing password.\");\n    }\n    const passwordsMap = normalizeStringPasswordToMap(sessionOptions.password);\n    if (Object.values(passwordsMap).some((password) => password.length < 32)) {\n      throw new Error(\n        \"iron-session: Bad usage. Password must be at least 32 characters long.\"\n      );\n    }\n    let sessionConfig = getSessionConfig(sessionOptions);\n    const sealFromCookies = getCookie(req, sessionConfig.cookieName);\n    const session = sealFromCookies ? await unsealData2(sealFromCookies, {\n      password: passwordsMap,\n      ttl: sessionConfig.ttl\n    }) : {};\n    Object.defineProperties(session, {\n      updateConfig: {\n        value: function updateConfig(newSessionOptions) {\n          sessionConfig = getSessionConfig(newSessionOptions);\n        }\n      },\n      save: {\n        value: async function save() {\n          if (\"headersSent\" in res && res.headersSent) {\n            throw new Error(\n              \"iron-session: Cannot set session cookie: session.save() was called after headers were sent. Make sure to call it before any res.send() or res.end()\"\n            );\n          }\n          const seal = await sealData2(session, {\n            password: passwordsMap,\n            ttl: sessionConfig.ttl\n          });\n          const cookieValue = (0,cookie__WEBPACK_IMPORTED_MODULE_0__.serialize)(\n            sessionConfig.cookieName,\n            seal,\n            sessionConfig.cookieOptions\n          );\n          if (cookieValue.length > 4096) {\n            throw new Error(\n              `iron-session: Cookie length is too big (${cookieValue.length} bytes), browsers will refuse it. Try to remove some data.`\n            );\n          }\n          setCookie(res, cookieValue);\n        }\n      },\n      destroy: {\n        value: function destroy() {\n          Object.keys(session).forEach((key) => {\n            delete session[key];\n          });\n          const cookieValue = (0,cookie__WEBPACK_IMPORTED_MODULE_0__.serialize)(sessionConfig.cookieName, \"\", {\n            ...sessionConfig.cookieOptions,\n            maxAge: 0\n          });\n          setCookie(res, cookieValue);\n        }\n      }\n    });\n    return session;\n  }\n}\nasync function getIronSessionFromCookieStore(cookieStore, sessionOptions, sealData2, unsealData2) {\n  if (!sessionOptions.cookieName) {\n    throw new Error(\"iron-session: Bad usage. Missing cookie name.\");\n  }\n  if (!sessionOptions.password) {\n    throw new Error(\"iron-session: Bad usage. Missing password.\");\n  }\n  const passwordsMap = normalizeStringPasswordToMap(sessionOptions.password);\n  if (Object.values(passwordsMap).some((password) => password.length < 32)) {\n    throw new Error(\n      \"iron-session: Bad usage. Password must be at least 32 characters long.\"\n    );\n  }\n  const sessionConfig = getSessionConfig(sessionOptions);\n  const sealFromCookies = getServerActionCookie(\n    sessionConfig.cookieName,\n    cookieStore\n  );\n  const session = sealFromCookies ? await unsealData2(sealFromCookies, {\n    password: passwordsMap,\n    ttl: sessionConfig.ttl\n  }) : {};\n  Object.defineProperties(session, {\n    save: {\n      value: async function save() {\n        const seal = await sealData2(session, {\n          password: passwordsMap,\n          ttl: sessionConfig.ttl\n        });\n        const cookieLength = sessionConfig.cookieName.length + seal.length + JSON.stringify(sessionConfig.cookieOptions).length;\n        if (cookieLength > 4096) {\n          throw new Error(\n            `iron-session: Cookie length is too big (${cookieLength} bytes), browsers will refuse it. Try to remove some data.`\n          );\n        }\n        cookieStore.set(\n          sessionConfig.cookieName,\n          seal,\n          sessionConfig.cookieOptions\n        );\n      }\n    },\n    destroy: {\n      value: function destroy() {\n        Object.keys(session).forEach((key) => {\n          delete session[key];\n        });\n        const cookieOptions = { ...sessionConfig.cookieOptions, maxAge: 0 };\n        cookieStore.set(sessionConfig.cookieName, \"\", cookieOptions);\n      }\n    }\n  });\n  return session;\n}\nvar sealData = createSealData(uncrypto__WEBPACK_IMPORTED_MODULE_2__);\nvar unsealData = createUnsealData(uncrypto__WEBPACK_IMPORTED_MODULE_2__);\nvar getIronSession = createGetIronSession(sealData, unsealData);\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/iron-session/dist/index.js\n");

/***/ })

};
;